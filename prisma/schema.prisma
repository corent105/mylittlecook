generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  householdProfiles MealUser[]          @relation("HouseholdOwner")
  mealUsers         MealUser[]
  recipes           Recipe[]
  sessions          Session[]
  favorites         UserFavorite[]
  sentInvitations   ProfileInvitation[] @relation("ProfileInviter")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MealUser {
  id                  String               @id @default(cuid())
  pseudo              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String?
  ownerId             String
  mealPlanAssignments MealPlanAssignment[]
  cookResponsibleFor  MealPlan[]           @relation("CookResponsible")
  owner               User                 @relation("HouseholdOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  user                User?                @relation(fields: [userId], references: [id])
  invitations         ProfileInvitation[]  @relation("InvitedProfile")

  @@map("meal_users")
}

model MealPlan {
  id                  String               @id @default(cuid())
  week                DateTime
  dayOfWeek           Int
  mealType            MealType
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  recipeId            String?
  cookResponsibleId   String?
  mealUserAssignments MealPlanAssignment[]
  cookResponsible     MealUser?            @relation("CookResponsible", fields: [cookResponsibleId], references: [id])
  recipe              Recipe?              @relation(fields: [recipeId], references: [id])

  @@map("meal_plans")
}

model Recipe {
  id          String             @id @default(cuid())
  title       String
  description String?
  content     String
  imageUrl    String?
  servings    Int?
  prepTime    Int?
  cookTime    Int?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  authorId    String?
  mealPlans   MealPlan[]
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  tags        RecipeTag[]
  types       RecipeType[]
  author      User?              @relation(fields: [authorId], references: [id])
  favorites   UserFavorite[]

  @@map("recipes")
}

model Ingredient {
  id       String             @id @default(cuid())
  name     String             @unique
  unit     String
  category String?
  recipes  RecipeIngredient[]

  @@map("ingredients")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  quantity     Float
  notes        String?
  recipeId     String
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model RecipeStep {
  id          String @id @default(cuid())
  stepNumber  Int
  title       String?
  instruction String   @db.Text  // Markdown content for the step
  duration    Int?     // Duration in minutes
  temperature String?  // Cooking temperature if applicable
  notes       String?  @db.Text  // Additional notes in markdown
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([recipeId, stepNumber])
  @@map("recipe_steps")
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  color   String?
  recipes RecipeTag[]

  @@map("tags")
}

model RecipeTag {
  id       String @id @default(cuid())
  recipeId String
  tagId    String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([recipeId, tagId])
  @@map("recipe_tags")
}

model UserFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("user_favorites")
}

model MealPlanAssignment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  mealPlanId String
  mealUserId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealUser   MealUser @relation(fields: [mealUserId], references: [id], onDelete: Cascade)

  @@unique([mealPlanId, mealUserId])
  @@map("meal_plan_assignments")
}

model RecipeType {
  id        String             @id @default(cuid())
  type      RecipeCategoryType
  createdAt DateTime           @default(now())
  recipeId  String
  recipe    Recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, type])
  @@map("recipe_types")
}

model ProfileInvitation {
  id          String    @id @default(cuid())
  token       String    @unique @default(cuid())
  email       String
  profileName String
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  inviterId  String
  inviter    User     @relation("ProfileInviter", fields: [inviterId], references: [id], onDelete: Cascade)
  mealUserId String
  mealUser   MealUser @relation("InvitedProfile", fields: [mealUserId], references: [id], onDelete: Cascade)

  @@map("profile_invitations")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum RecipeCategoryType {
  BREAKFAST
  APPETIZER
  STARTER
  MAIN_COURSE
  SIDE_DISH
  DESSERT
  BEVERAGE
}
